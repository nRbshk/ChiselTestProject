;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Axi4_3_data_address_synchronous : 
  module Queue_Model : 
    output io : {flip clk : Clock, flip rstn : AsyncReset, flip ren : UInt<1>, flip wen : UInt<1>, full : UInt<1>, nempty : UInt<1>}
    
    wire ptr_r_next : UInt<2> @[Queue.scala 23:26]
    wire ptr_w_next : UInt<2> @[Queue.scala 24:26]
    wire queue_next : UInt<1>[4] @[Queue.scala 27:30]
    node queue_lo = cat(queue_next[1], queue_next[0]) @[Queue.scala 30:47]
    node queue_hi = cat(queue_next[3], queue_next[2]) @[Queue.scala 30:47]
    node _queue_T = cat(queue_hi, queue_lo) @[Queue.scala 30:47]
    node _queue_T_1 = and(io.ren, io.nempty) @[Queue.scala 30:95]
    node _queue_T_2 = not(io.full) @[Queue.scala 30:123]
    node _queue_T_3 = and(io.wen, _queue_T_2) @[Queue.scala 30:120]
    node _queue_T_4 = or(_queue_T_1, _queue_T_3) @[Queue.scala 30:109]
    reg queue : UInt<4>, io.clk with : (reset => (io.rstn, UInt<4>("h00"))) @[Reg.scala 27:20]
    when _queue_T_4 : @[Reg.scala 28:19]
      queue <= _queue_T @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _ptr_r_T = and(io.ren, io.nempty) @[Queue.scala 31:82]
    reg ptr_r : UInt<2>, io.clk with : (reset => (io.rstn, UInt<2>("h00"))) @[Reg.scala 27:20]
    when _ptr_r_T : @[Reg.scala 28:19]
      ptr_r <= ptr_r_next @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _ptr_w_T = not(io.full) @[Queue.scala 32:85]
    node _ptr_w_T_1 = and(io.wen, _ptr_w_T) @[Queue.scala 32:82]
    reg ptr_w : UInt<2>, io.clk with : (reset => (io.rstn, UInt<2>("h00"))) @[Reg.scala 27:20]
    when _ptr_w_T_1 : @[Reg.scala 28:19]
      ptr_w <= ptr_w_next @[Reg.scala 28:23]
      skip @[Reg.scala 28:19]
    node _T = not(io.full) @[Queue.scala 36:25]
    node _T_1 = and(io.wen, _T) @[Queue.scala 36:22]
    when _T_1 : @[Queue.scala 36:35]
      wire _WIRE : UInt<1>[4] @[Queue.scala 36:65]
      wire _WIRE_1 : UInt<4>
      _WIRE_1 <= queue
      node _T_2 = bits(_WIRE_1, 0, 0) @[Queue.scala 36:65]
      _WIRE[0] <= _T_2 @[Queue.scala 36:65]
      node _T_3 = bits(_WIRE_1, 1, 1) @[Queue.scala 36:65]
      _WIRE[1] <= _T_3 @[Queue.scala 36:65]
      node _T_4 = bits(_WIRE_1, 2, 2) @[Queue.scala 36:65]
      _WIRE[2] <= _T_4 @[Queue.scala 36:65]
      node _T_5 = bits(_WIRE_1, 3, 3) @[Queue.scala 36:65]
      _WIRE[3] <= _T_5 @[Queue.scala 36:65]
      queue_next[0] <= _WIRE[0] @[Queue.scala 36:48]
      queue_next[1] <= _WIRE[1] @[Queue.scala 36:48]
      queue_next[2] <= _WIRE[2] @[Queue.scala 36:48]
      queue_next[3] <= _WIRE[3] @[Queue.scala 36:48]
      queue_next[ptr_w] <= UInt<1>("h01") @[Queue.scala 36:114]
      skip @[Queue.scala 36:35]
    else : @[Queue.scala 37:41]
      node _T_6 = and(io.ren, io.nempty) @[Queue.scala 37:27]
      when _T_6 : @[Queue.scala 37:41]
        wire _WIRE_2 : UInt<1>[4] @[Queue.scala 37:71]
        wire _WIRE_3 : UInt<4>
        _WIRE_3 <= queue
        node _T_7 = bits(_WIRE_3, 0, 0) @[Queue.scala 37:71]
        _WIRE_2[0] <= _T_7 @[Queue.scala 37:71]
        node _T_8 = bits(_WIRE_3, 1, 1) @[Queue.scala 37:71]
        _WIRE_2[1] <= _T_8 @[Queue.scala 37:71]
        node _T_9 = bits(_WIRE_3, 2, 2) @[Queue.scala 37:71]
        _WIRE_2[2] <= _T_9 @[Queue.scala 37:71]
        node _T_10 = bits(_WIRE_3, 3, 3) @[Queue.scala 37:71]
        _WIRE_2[3] <= _T_10 @[Queue.scala 37:71]
        queue_next[0] <= _WIRE_2[0] @[Queue.scala 37:54]
        queue_next[1] <= _WIRE_2[1] @[Queue.scala 37:54]
        queue_next[2] <= _WIRE_2[2] @[Queue.scala 37:54]
        queue_next[3] <= _WIRE_2[3] @[Queue.scala 37:54]
        queue_next[ptr_r] <= UInt<1>("h00") @[Queue.scala 37:120]
        skip @[Queue.scala 37:41]
      else : @[Queue.scala 38:20]
        wire _WIRE_4 : UInt<1>[4] @[Queue.scala 38:50]
        wire _WIRE_5 : UInt<4>
        _WIRE_5 <= queue
        node _T_11 = bits(_WIRE_5, 0, 0) @[Queue.scala 38:50]
        _WIRE_4[0] <= _T_11 @[Queue.scala 38:50]
        node _T_12 = bits(_WIRE_5, 1, 1) @[Queue.scala 38:50]
        _WIRE_4[1] <= _T_12 @[Queue.scala 38:50]
        node _T_13 = bits(_WIRE_5, 2, 2) @[Queue.scala 38:50]
        _WIRE_4[2] <= _T_13 @[Queue.scala 38:50]
        node _T_14 = bits(_WIRE_5, 3, 3) @[Queue.scala 38:50]
        _WIRE_4[3] <= _T_14 @[Queue.scala 38:50]
        queue_next[0] <= _WIRE_4[0] @[Queue.scala 38:33]
        queue_next[1] <= _WIRE_4[1] @[Queue.scala 38:33]
        queue_next[2] <= _WIRE_4[2] @[Queue.scala 38:33]
        queue_next[3] <= _WIRE_4[3] @[Queue.scala 38:33]
        skip @[Queue.scala 38:20]
    node _ptr_r_next_T = add(ptr_r, UInt<1>("h01")) @[Queue.scala 41:29]
    node _ptr_r_next_T_1 = tail(_ptr_r_next_T, 1) @[Queue.scala 41:29]
    ptr_r_next <= _ptr_r_next_T_1 @[Queue.scala 41:20]
    node _ptr_w_next_T = add(ptr_w, UInt<1>("h01")) @[Queue.scala 42:29]
    node _ptr_w_next_T_1 = tail(_ptr_w_next_T, 1) @[Queue.scala 42:29]
    ptr_w_next <= _ptr_w_next_T_1 @[Queue.scala 42:20]
    node _io_full_T = andr(queue) @[Queue.scala 44:33]
    io.full <= _io_full_T @[Queue.scala 44:17]
    node _io_nempty_T = orr(queue) @[Queue.scala 45:35]
    io.nempty <= _io_nempty_T @[Queue.scala 45:19]
    
  module Axi4_3_data_address_synchronous : 
    output io : {flip clk : Clock, flip rstn : AsyncReset, flip wvalid : UInt<1>, flip wready : UInt<1>, flip wlast : UInt<1>, flip awvalid : UInt<1>, flip awready : UInt<1>, wvalid_o : UInt<1>, wready_o : UInt<1>, wlast_o : UInt<1>, awvalid_o : UInt<1>, awready_o : UInt<1>}
    
    wire data_accept : UInt<1> @[Axi4_3_data_address_synchronous.scala 30:25]
    wire address_accept : UInt<1> @[Axi4_3_data_address_synchronous.scala 31:28]
    node _data_accept_T = and(io.wvalid, io.wready) @[Axi4_3_data_address_synchronous.scala 32:28]
    data_accept <= _data_accept_T @[Axi4_3_data_address_synchronous.scala 32:15]
    node _address_accept_T = and(io.awvalid, io.awready) @[Axi4_3_data_address_synchronous.scala 33:32]
    address_accept <= _address_accept_T @[Axi4_3_data_address_synchronous.scala 33:18]
    wire output_address_accept : UInt<1> @[Axi4_3_data_address_synchronous.scala 35:35]
    node _output_address_accept_T = and(io.awready_o, io.awvalid_o) @[Axi4_3_data_address_synchronous.scala 36:41]
    output_address_accept <= _output_address_accept_T @[Axi4_3_data_address_synchronous.scala 36:25]
    wire ren : UInt<1> @[Axi4_3_data_address_synchronous.scala 38:17]
    wire wen : UInt<1> @[Axi4_3_data_address_synchronous.scala 39:17]
    node _ren_T = and(data_accept, io.wlast) @[Axi4_3_data_address_synchronous.scala 40:22]
    node _ren_T_1 = not(output_address_accept) @[Axi4_3_data_address_synchronous.scala 40:37]
    node _ren_T_2 = and(_ren_T, _ren_T_1) @[Axi4_3_data_address_synchronous.scala 40:34]
    ren <= _ren_T_2 @[Axi4_3_data_address_synchronous.scala 40:7]
    wen <= address_accept @[Axi4_3_data_address_synchronous.scala 41:7]
    inst queue of Queue_Model @[Axi4_3_data_address_synchronous.scala 43:21]
    wire full : UInt<1> @[Axi4_3_data_address_synchronous.scala 45:18]
    wire nempty : UInt<1> @[Axi4_3_data_address_synchronous.scala 46:20]
    queue.io.clk <= io.clk @[Axi4_3_data_address_synchronous.scala 48:16]
    queue.io.rstn <= io.rstn @[Axi4_3_data_address_synchronous.scala 49:11]
    queue.io.ren <= ren @[Axi4_3_data_address_synchronous.scala 50:7]
    queue.io.wen <= wen @[Axi4_3_data_address_synchronous.scala 51:7]
    full <= queue.io.full @[Axi4_3_data_address_synchronous.scala 52:8]
    nempty <= queue.io.nempty @[Axi4_3_data_address_synchronous.scala 53:10]
    node _io_wvalid_o_T = and(nempty, io.wvalid) @[Axi4_3_data_address_synchronous.scala 56:25]
    io.wvalid_o <= _io_wvalid_o_T @[Axi4_3_data_address_synchronous.scala 56:15]
    node _io_wready_o_T = and(nempty, io.wready) @[Axi4_3_data_address_synchronous.scala 57:25]
    io.wready_o <= _io_wready_o_T @[Axi4_3_data_address_synchronous.scala 57:15]
    node _io_wlast_o_T = and(nempty, io.wlast) @[Axi4_3_data_address_synchronous.scala 58:24]
    io.wlast_o <= _io_wlast_o_T @[Axi4_3_data_address_synchronous.scala 58:14]
    node _io_awready_o_T = not(full) @[Axi4_3_data_address_synchronous.scala 60:19]
    node _io_awready_o_T_1 = and(_io_awready_o_T, io.awready) @[Axi4_3_data_address_synchronous.scala 60:25]
    io.awready_o <= _io_awready_o_T_1 @[Axi4_3_data_address_synchronous.scala 60:16]
    node _io_awvalid_o_T = not(full) @[Axi4_3_data_address_synchronous.scala 61:19]
    node _io_awvalid_o_T_1 = and(_io_awvalid_o_T, io.awvalid) @[Axi4_3_data_address_synchronous.scala 61:25]
    io.awvalid_o <= _io_awvalid_o_T_1 @[Axi4_3_data_address_synchronous.scala 61:16]
    
